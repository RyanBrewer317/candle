let N1: Type = 
  {X: Type}=> X => ({R: Type}=> (R => R) => (R => X) => R => X) => X 
in
let zero1{X: Type}(z: X)(s: {R: Type}=> (R => R) => (R => X) => R => X): X =
  z
in
let succ1: N1=>N1 = (n: N1)-> {X: Type}-> (z: X)-> (s: {R: Type}=> (R => R) => (R => X) => R => X)->
  s{N1}((x: N1)-> x)((x: N1)-> x{X}(z)(s))(n)
in

let NInd1<n: N1>: Type =
  {P: <N1>=> Type}=> 
  P<zero1> => 
  ({R: Type}=> (f: R => N1)=> (ih: (r: R)=> P<f(r)>)=> (r: R)=> P<succ1(f(r))>) => 
  P<n>
in

let subst{A: Type}{a: A}{b: A}(e: a =[A] b){P: <y: A>=> <a =[A] y>=> Type}: P<a><refl(a, A)> => P<b><e> =
  J(e, a, b; A, P)
in
let j{A: Type}{x: A}{y: A}(e: x =[A] y){P: <x: A>=> <y: A>=> <x =[A] y>=> Type}(w: {i: A}=> P<i><i><refl(i,A)>): P<x><y><e> =
  subst{A}{x}{y}(e){<y: A>-> <e: x =[A] y>-> P<x><y><e>}(w{x})
in

let N2: Type = (n: N1) & NInd1<n> in
let zero2: N2 = [
  zero1, 
  {P: <N1>=> Type}-> 
    (z: P<zero1>)->
    (s: {R: Type}=> (f: R => N1)=> (ih: (r: R)=> P<f(r)>)=> (r: R)=> P<succ1(f(r))>)->
    z;
  N2
] in
let succ2(n: N2): N2 = [
  succ1(.1(n)),
  {P: <N1>=> Type}->
    (z: P<zero1>)->
    (s: {R: Type}=> (f: R => N1)=> (ih: (r: R)=> P<f(r)>)=> (r: R)=> P<succ1(f(r))>)->
    s{N2}((f: N2)-> .1(f))((ih: N2)-> .2(ih){P}(z)(s))(n);
  N2
] in
let n1_to(n: N1): N2 = 
  n{N2}(zero2)({R: Type}-> (f: R=>R)-> (rec: R=>N2)-> (x: R)-> succ2(rec(x))) 
in
let n1_fixed1(n: N2): (.1(n1_to(.1(n))) =[N1] .1(n)) =
  .2(n){<i: N1>-> .1(n1_to(i)) =[N1] i}(refl(zero1,N1))(
    {R: Type}->(f: R=>N1)->(rec: (r: R)=> .1(n1_to(f(r))) =[N1] f(r))->(xs: R)->
      j{N1}{.1(n1_to(f(xs)))}{f(xs)}(rec(xs)){
        <x: N1>-> <y: N1>-> <e: x =[N1] y>-> succ1(x) =[N1] succ1(y)
      }({i: N1}-> refl(succ1(i),N1))
  )
in
6